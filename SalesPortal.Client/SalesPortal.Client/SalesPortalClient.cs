// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using SalesPortal.Client.CompensationPlan;
using SalesPortal.Client.Credential;
using SalesPortal.Client.CreditNote;
using SalesPortal.Client.MonthlyReport;
using SalesPortal.Client.Node;
using SalesPortal.Client.Person;
using SalesPortal.Client.Product;
using SalesPortal.Client.ProductGroup;
using SalesPortal.Client.Sale;
using SalesPortal.Client.SalesGroup;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System;
namespace SalesPortal.Client
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class SalesPortalClient : BaseRequestBuilder
    {
        /// <summary>The CompensationPlan property</summary>
        public global::SalesPortal.Client.CompensationPlan.CompensationPlanRequestBuilder CompensationPlan
        {
            get => new global::SalesPortal.Client.CompensationPlan.CompensationPlanRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Credential property</summary>
        public global::SalesPortal.Client.Credential.CredentialRequestBuilder Credential
        {
            get => new global::SalesPortal.Client.Credential.CredentialRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The CreditNote property</summary>
        public global::SalesPortal.Client.CreditNote.CreditNoteRequestBuilder CreditNote
        {
            get => new global::SalesPortal.Client.CreditNote.CreditNoteRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The MonthlyReport property</summary>
        public global::SalesPortal.Client.MonthlyReport.MonthlyReportRequestBuilder MonthlyReport
        {
            get => new global::SalesPortal.Client.MonthlyReport.MonthlyReportRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Node property</summary>
        public global::SalesPortal.Client.Node.NodeRequestBuilder Node
        {
            get => new global::SalesPortal.Client.Node.NodeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Person property</summary>
        public global::SalesPortal.Client.Person.PersonRequestBuilder Person
        {
            get => new global::SalesPortal.Client.Person.PersonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Product property</summary>
        public global::SalesPortal.Client.Product.ProductRequestBuilder Product
        {
            get => new global::SalesPortal.Client.Product.ProductRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ProductGroup property</summary>
        public global::SalesPortal.Client.ProductGroup.ProductGroupRequestBuilder ProductGroup
        {
            get => new global::SalesPortal.Client.ProductGroup.ProductGroupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The Sale property</summary>
        public global::SalesPortal.Client.Sale.SaleRequestBuilder Sale
        {
            get => new global::SalesPortal.Client.Sale.SaleRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The SalesGroup property</summary>
        public global::SalesPortal.Client.SalesGroup.SalesGroupRequestBuilder SalesGroup
        {
            get => new global::SalesPortal.Client.SalesGroup.SalesGroupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::SalesPortal.Client.SalesPortalClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SalesPortalClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://api.sales.createif-labs.de";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
